<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminProductScheduledUpdateMinimumAdvertisedPriceSecondWebsiteTest">
        <annotations>
            <stories value="Create scheduled product updates"/>
            <title value="Admin should be able to set minimum advertised price for a store view in a scheduled update"/>
            <description value="Admin should be able to set minimum advertised price for a store view in a scheduled update"/>
            <severity value="CRITICAL"/>
            <useCaseId value="MC-42501"/>
            <testCaseId value="MC-42557"/>
            <group value="CatalogStaging"/>
        </annotations>
        <before>
            <!-- Create product -->
            <createData entity="SimpleProduct2" stepKey="createProduct"/>
            <!-- Login to admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Create  website -->
            <actionGroup ref="AdminCreateWebsiteActionGroup" stepKey="createAdditionalWebsite">
                <argument name="newWebsiteName" value="{{customWebsite.name}}"/>
                <argument name="websiteCode" value="{{customWebsite.code}}"/>
            </actionGroup>
            <!-- Create store group -->
            <actionGroup ref="AdminCreateNewStoreGroupActionGroup" stepKey="createNewStore">
                <argument name="website" value="{{customWebsite.name}}"/>
                <argument name="storeGroupName" value="{{customStoreGroup.name}}"/>
                <argument name="storeGroupCode" value="{{customStoreGroup.code}}"/>
            </actionGroup>
            <!-- Create store view -->
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createNewStoreView">
                <argument name="StoreGroup" value="customStoreGroup"/>
                <argument name="customStore" value="customStore"/>
            </actionGroup>
            <!-- Add store code to URL -->
            <magentoCLI command="config:set {{StorefrontEnableAddStoreCodeToUrls.path}} {{StorefrontEnableAddStoreCodeToUrls.value}}" stepKey="setAddStoreCodeToUrlsToYes"/>
            <!-- Enable MAP -->
            <magentoCLI command="config:set --scope=websites --scope-code={{customWebsite.code}} sales/msrp/enabled 1" stepKey="enableMsrpForSecondWebsite"/>
            <magentoCron groups="index" stepKey="reindex"/>
        </before>
        <after>
            <!-- Reset "add store code to URL" -->
            <magentoCLI command="config:set {{StorefrontDisableAddStoreCodeToUrls.path}} {{StorefrontDisableAddStoreCodeToUrls.value}}" stepKey="setAddStoreCodeToUrlsToNo"/>
            <!-- Reset MAP configuration -->
            <magentoCLI command="config:set --scope=websites --scope-code={{customWebsite.code}} sales/msrp/enabled 0" stepKey="disableMsrpForSecondWebsite"/>
            <!-- Delete product -->
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <!-- Delete website -->
            <actionGroup ref="AdminDeleteWebsiteActionGroup" stepKey="deleteSecondWebsite">
                <argument name="websiteName" value="{{customWebsite.name}}"/>
            </actionGroup>
            <magentoCron groups="index" stepKey="reindex"/>
            <!-- Logout from admin -->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- Go to the edit page of the product that we just created -->
        <actionGroup ref="AdminProductPageOpenByIdActionGroup" stepKey="openProductBeforeStaging">
            <argument name="productId" value="$createProduct.id$"/>
        </actionGroup>
        <!-- Add product to second website -->
        <actionGroup ref="SelectProductInWebsitesActionGroup" stepKey="addProductToWebsite">
            <argument name="website" value="{{customWebsite.name}}"/>
        </actionGroup>
        <!-- Save product -->
        <actionGroup ref="SaveProductFormActionGroup" stepKey="saveProduct"/>
        <!-- Switch to custom website store view -->
        <actionGroup ref="AdminSwitchStoreViewActionGroup" stepKey="switchToDefaultStoreView">
            <argument name="storeView" value="customStore.name"/>
        </actionGroup>
        <!-- Create new scheduled update -->
        <actionGroup ref="AdminFillPermanentUpdateActionGroup" stepKey="fillStagingUpdate">
            <argument name="stage" value="UpdateDatePlusTwoMinutes"/>
        </actionGroup>
        <!-- Set MAP to 150 -->
        <actionGroup ref="AdminProductScheduledUpdateFillMinimumAdvertisedPriceActionGroup" stepKey="fillProductScheduleUpdateSpecialPrice">
            <argument name="msrp" value="150"/>
        </actionGroup>
        <!--Save scheduled update -->
        <actionGroup ref="SaveScheduleUpdateForProductActionGroup" stepKey="saveScheduleUpdateForProduct">
            <argument name="staging" value="UpdateDatePlusTwoMinutes"/>
        </actionGroup>
        <!-- Wait 2 minutes -->
        <wait time="120" stepKey="waitForActivation"/>
        <!-- Run cron to activate scheduled update -->
        <actionGroup ref="ApplyUpdatedRuleStagingByCron" stepKey="runCronTwice"/>
        <!-- Open product on second website -->
        <actionGroup ref="StorefrontOpenProductPageUsingStoreCodeInUrlActionGroup" stepKey="openProductPageUsingStoreCodeInUrl">
            <argument name="product" value="$$createProduct$$"/>
            <argument name="storeView" value="customStore"/>
        </actionGroup>
        <!-- Verify that MAP is shown and is equal to 150 -->
        <grabTextFrom selector="{{StorefrontProductInfoMainSection.mapPrice}}" stepKey="grabMsrPrice"/>
        <assertEquals stepKey="assertMapPrice">
            <actualResult type="variable">grabMsrPrice</actualResult>
            <expectedResult type="string">$150.00</expectedResult>
        </assertEquals>
    </test>
</tests>
