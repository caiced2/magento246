<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminExportGiftCardTest">
        <annotations>
            <features value="GiftCardImportExport"/>
            <stories value="Export Products"/>
            <title value="Export Gift Card"/>
            <description value="Verifies that a user can export a Gift Card product. Verifies that the exported file
            and the downloadable copy of the exported file contain the expected product (a filter is applied when
            exporting such that ONLY the gift card product should be in the export). Note that MFTF cannot simply
            download a file and have access to it due to the test not having access to the server that is running the
            test browser. Therefore, this test verifies that the Download button can be successfully clicked, grabs the
            request URL from the Download button, executes the request on the magento machine via a curl request, and
            verifies the contents of the downloaded file"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-38558"/>
            <group value="importExport"/>
            <group value="giftCard"/>
        </annotations>

        <before>
            <!-- Create Gift Card -->
            <createData entity="ApiGiftCard" stepKey="createProduct"/>
            <magentoCron groups="index" stepKey="runCronIndex"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>

        <after>
            <!-- Delete Data -->
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="deleteDirectory" stepKey="deleteExportFileDirectory">
                <argument name="path">{"local":"var/export","s3":"import_export/export"}</argument>
            </helper>
            <magentoCron groups="index" stepKey="reindexInvalidatedIndices"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>

        <!-- Export Created Products -->
        <actionGroup ref="AdminNavigateToExportPageActionGroup" stepKey="goToExportIndexPage"/>
        <actionGroup ref="ExportProductsFilterByAttributeActionGroup" stepKey="exportProductBySku">
            <argument name="attribute" value="sku"/>
            <argument name="attributeData" value="$$createProduct.sku$$"/>
        </actionGroup>

        <!-- Start Message Queue for Export Consumer -->
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueue">
            <argument name="consumerName" value="{{AdminExportMessageConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AdminExportMessageConsumerData.messageLimit}}"/>
        </actionGroup>
        <reloadPage stepKey="refreshPage"/>
        <waitForPageLoad stepKey="waitForReload"/>
        <waitForElementVisible selector="{{AdminExportAttributeSection.exportFileNameByPosition('0')}}" stepKey="waitForFileName"/>
        <grabTextFrom selector="{{AdminExportAttributeSection.exportFileNameByPosition('0')}}" stepKey="getFilename"/>
        <actionGroup ref="AdminGetExportFilenameOnServerActionGroup" stepKey="grabNameFile">
            <argument name="rowIndex" value="0"/>
        </actionGroup>

        <!-- Validate Export File on File System -->
        <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="assertFileExists" stepKey="assertExportFileExists">
            <argument name="filePath">{"local":"var/export/{$grabNameFile}","s3":"import_export/export/{$grabNameFile}"}</argument>
        </helper>
        <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsGiftCardProduct">
            <argument name="filePath">{"local":"var/export/{$grabNameFile}","s3":"import_export/export/{$grabNameFile}"}</argument>
            <argument name="text">$$createProduct.name$$</argument>
        </helper>
        <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsGiftCardData">
            <argument name="filePath">{"local":"var/export/{$grabNameFile}","s3":"import_export/export/{$grabNameFile}"}</argument>
            <argument name="text">allow_open_amount={{CustomAttributeAllowOpenAmount.valueText}}</argument>
        </helper>
        <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsGiftCardDataGiftCardType">
            <argument name="filePath">{"local":"var/export/{$grabNameFile}","s3":"import_export/export/{$grabNameFile}"}</argument>
            <argument name="text">giftcard_type={{CustomAttributeGiftCardType.valueText}}</argument>
        </helper>
        <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsGiftCardDataOpenAmountMax">
            <argument name="filePath">{"local":"var/export/{$grabNameFile}","s3":"import_export/export/{$grabNameFile}"}</argument>
            <argument name="text">open_amount_max=$createProduct.custom_attributes[open_amount_max]$</argument>
        </helper>
        <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="assertFileContainsString" stepKey="assertExportFileContainsGiftCardDataOpenAmountMin">
            <argument name="filePath">{"local":"var/export/{$grabNameFile}","s3":"import_export/export/{$grabNameFile}"}</argument>
            <argument name="text">open_amount_min=$createProduct.custom_attributes[open_amount_min]$</argument>
        </helper>

        <!-- Download Export File -->
        <actionGroup ref="DownloadFileActionGroup" stepKey="downloadExport">
            <argument name="fileName" value="{$getFilename}"/>
        </actionGroup>

        <!-- Validate Downloaded Export File on File System -->
        <grabAttributeFrom userInput="href" selector="{{AdminExportAttributeSection.download('0')}}" stepKey="grabExportUrl"/>
        <helper class="Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsGiftCardProduct">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">$$createProduct.name$$</argument>
        </helper>
        <helper class="Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsGiftCardData">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">allow_open_amount={{CustomAttributeAllowOpenAmount.valueText}}</argument>
        </helper>
        <helper class="Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsGiftCardDataGiftcardType">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">giftcard_type={{CustomAttributeGiftCardType.valueText}}</argument>
        </helper>
        <helper class="Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsGiftCardDataOpenAmountMax">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">open_amount_max=$createProduct.custom_attributes[open_amount_max]$</argument>
        </helper>
        <helper class="Magento\Backend\Test\Mftf\Helper\CurlHelpers" method="assertCurlResponseContainsString" stepKey="assertDownloadFileContainsGiftCardDataOpenAmountMin">
            <argument name="url">{$grabExportUrl}</argument>
            <argument name="expectedString">open_amount_min=$createProduct.custom_attributes[open_amount_min]$</argument>
        </helper>

        <!-- Delete Export File -->
        <actionGroup ref="DeleteExportedFileActionGroup" stepKey="deleteExportedFile">
            <argument name="fileName" value="{$getFilename}"/>
        </actionGroup>
        <helper class="Magento\AwsS3\Test\Mftf\Helper\FileAssertions" method="assertFileDoesNotExist" stepKey="assertExportFileDeleted">
            <argument name="filePath">{"local":"var/export/{$grabNameFile}","s3":"import_export/export/{$grabNameFile}"}</argument>
        </helper>
    </test>
</tests>
