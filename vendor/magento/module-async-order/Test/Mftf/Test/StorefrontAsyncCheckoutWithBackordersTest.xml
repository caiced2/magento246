<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontAsyncCheckoutWithBackordersTest">
        <annotations>
            <features value="Checkout"/>
            <stories value="Checkout via Guest Async Checkout"/>
            <title value="Received order should not be rejected because of low stock if backorders feature is enabled"/>
            <description value="Order placed asynchronously should be processed and product qty should become negative"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-42906"/>
            <group value="checkout"/>
            <group value="async_checkout"/>
        </annotations>
        <before>
            <magentoCLI command="config:set checkout/options/enable_guest_checkout_login 1" stepKey="EnablingGuestCheckoutLogin"/>
            <comment userInput="BIC workaround" stepKey="enableAsyncCheckout"/>
            <magentoCLI command="config:set cataloginventory/item_options/backorders 1" stepKey="EnableBackorders"/>
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="ApiSimpleProduct" stepKey="createProductY">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
        </before>
        <after>
            <magentoCLI command="config:set cataloginventory/item_options/backorders 0" stepKey="EnableBackorders"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <comment userInput="BIC workaround" stepKey="disableAsyncCheckout"/>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <actionGroup ref="DeleteCustomerByEmailActionGroup" stepKey="deleteCustomer">
                <argument name="email" value="{{CustomerEntityOne.email}}"/>
            </actionGroup>
            <actionGroup ref="ResetAdminDataGridToDefaultViewActionGroup" stepKey="resetGrid"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="adminLogout"/>
            <magentoCLI command="config:set checkout/options/enable_guest_checkout_login 0" stepKey="DisablingGuestCheckoutLogin"/>
        </after>

        <!-- Guest Checkout Process-->
        <amOnPage url="{{StorefrontCategoryPage.url($$createCategory.custom_attributes[url_key]$$)}}" stepKey="onCategoryPage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="StorefrontHoverProductOnCategoryPageActionGroup" stepKey="hoverProduct"/>
        <actionGroup ref="StorefrontClickAddToCartButtonActionGroup" stepKey="addToCart"/>
        <waitForElementVisible selector="{{StorefrontCategoryMainSection.SuccessMsg}}" time="30" stepKey="waitForProductAdded"/>
        <see selector="{{StorefrontCategoryMainSection.SuccessMsg}}" userInput="You added $$createProductY.name$$ to your shopping cart." stepKey="seeAddedToCartMessage"/>
        <see selector="{{StorefrontMinicartSection.quantity}}" userInput="1" stepKey="seeCartQuantity"/>
        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="guestGoToCheckoutFromMinicart"/>
        <actionGroup ref="GuestCheckoutFillingShippingSectionActionGroup" stepKey="guestCheckoutFillingShippingSection">
            <argument name="customerVar" value="CustomerEntityOne"/>
            <argument name="customerAddressVar" value="CustomerAddressSimple"/>
        </actionGroup>
        <actionGroup ref="CheckoutSelectCheckMoneyOrderPaymentActionGroup" stepKey="guestSelectCheckMoneyOrderPayment"/>
        <actionGroup ref="CheckBillingAddressInCheckoutActionGroup" stepKey="guestSeeAddress">
            <argument name="customerVar" value="CustomerEntityOne"/>
            <argument name="customerAddressVar" value="CustomerAddressSimple"/>
        </actionGroup>
        <actionGroup ref="CheckoutPlaceOrderActionGroup" stepKey="guestPlaceorder">
            <argument name="orderNumberMessage" value="CONST.successGuestCheckoutOrderNumberMessage"/>
            <argument name="emailYouMessage" value="CONST.successCheckoutEmailYouMessage"/>
        </actionGroup>

        <!-- Create Customer -->
        <grabTextFrom selector="{{CheckoutSuccessRegisterSection.orderNumber}}" stepKey="grabOrderNumber"/>
        <actionGroup ref="StorefrontRegisterCustomerFromOrderSuccessPage" stepKey="createCustomerAfterPlaceOrder">
            <argument name="customer" value="CustomerEntityOne"/>
        </actionGroup>

        <!-- Verify Customer -->
        <actionGroup ref="AssertMessageCustomerCreateAccountActionGroup" stepKey="seeSuccessMessage">
            <argument name="messageType" value="success"/>
            <argument name="message" value="Thank you for registering with Main Website Store."/>
        </actionGroup>

        <!-- Go to My Account > My Orders page -->
        <click selector="{{StorefrontCustomerSidebarSection.sidebarTab('My Orders')}}" stepKey="clickOnMyOrders"/>
        <waitForPageLoad stepKey="waitForOrdersLoad"/>

        <!-- Check Order Status is Received and Reorder Action is Not Available  -->
        <actionGroup ref="AssertReceivedOrderInGridActionGroup" stepKey="checkReorderButton">
            <argument name="orderId" value="{$grabOrderNumber}"/>
        </actionGroup>

        <!-- Assert Cart is Empty -->
        <actionGroup ref="AssertShoppingCartIsEmptyActionGroup" stepKey="seeEmptyShoppingCartForFirstCustomer"/>

        <!-- Set Simple Product qty to Zero -->
        <updateData entity="ApiSimpleProductZeroQty" createDataKey="createProductY" stepKey="updateProduct1"/>

        <!-- Trigger Async Place Order Consumer-->
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueueConsumer">
            <argument name="consumerName" value="{{AsyncPlaceOrderConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AsyncPlaceOrderConsumerData.messageLimit}}"/>
        </actionGroup>

        <!-- Go to My Account > My Orders Page -->
        <actionGroup ref="StorefrontOpenMyAccountPageActionGroup" stepKey="onMyAccountAgain"/>
        <click selector="{{StorefrontCustomerSidebarSection.sidebarTab('My Orders')}}" stepKey="clickOnMyOrdersAgain"/>
        <waitForPageLoad stepKey="waitForOrdersLoadAgain"/>

        <!-- Check Order Status is Pending and Reorder Action is Available  -->
        <actionGroup ref="AssertProcessedOrderInGridActionGroup" stepKey="CheckOrderIsProcessed">
            <argument name="orderId" value="{$grabOrderNumber}"/>
        </actionGroup>
    </test>
</tests>
