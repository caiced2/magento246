<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->
<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="StorefrontCustomerAsyncCheckoutWithCatalogRuleTest">
        <annotations>
            <features value="Checkout"/>
            <stories value="Customer Asynchronous Checkout with Catalog Price Rule applied"/>
            <title value="Customer should be able to place an order asynchronously with applied catalog price rule"/>
            <description value="Should be able to place an order asynchronously as a Customer with applied Catalog Price Rule"/>
            <severity value="CRITICAL"/>
            <testCaseId value="MC-43251"/>
            <group value="checkout"/>
            <group value="async_checkout"/>
        </annotations>
        <before>
            <comment userInput="BIC workaround" stepKey="enableAsyncCheckout"/>
            <!-- Create Customer -->
            <createData entity="Simple_US_Customer" stepKey="createCustomer"/>
            <!-- Create Product and Category for Order placement -->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="productWithHTMLEntityOne" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <!-- Login to Admin -->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
        </before>
        <after>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <comment userInput="BIC workaround" stepKey="disableAsyncCheckout"/>
            <!-- Delete the catalog price rule -->
            <actionGroup ref="AdminCatalogPriceRuleDeleteAllActionGroup" stepKey="deleteAllCatalogRulesAfterTest"/>
            <magentoCron groups="index" stepKey="fixInvalidatedIndicesAfterTest"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="adminLogout"/>
        </after>
        <!-- Create Catalog Price Rule-->
        <actionGroup ref="AdminOpenNewCatalogPriceRuleFormPageActionGroup" stepKey="openNewCatalogPriceRulePage"/>
        <actionGroup ref="AdminCatalogPriceRuleFillMainInfoActionGroup" stepKey="fillMainInfoForCatalogPriceRule">
            <argument name="groups" value="'General'"/>
        </actionGroup>
        <actionGroup ref="AdminFillCatalogRuleConditionActionGroup" stepKey="fillConditionsForCatalogPriceRule">
            <argument name="conditionValue" value="$createCategory.id$"/>
        </actionGroup>
        <actionGroup ref="AdminCatalogPriceRuleFillActionsActionGroup" stepKey="fillActionsForCatalogPriceRule">
            <argument name="apply" value="by_percent"/>
            <argument name="discountAmount" value="10"/>
        </actionGroup>
        <actionGroup ref="AdminCatalogPriceRuleSaveAndApplyActionGroup" stepKey="saveAndApplyCatalogPriceRule"/>
        <comment userInput="Adding the comment to replace CliIndexerReindexActionGroup action group ('indexer:reindex' commands) for preserving Backward Compatibility" stepKey="reindex"/>

        <!--Go to category and check price-->
        <actionGroup ref="AssertStorefrontProductPriceInCategoryPageActionGroup" stepKey="assertProductPriceInCategoryPage">
            <argument name="categoryUrl" value="$createCategory.custom_attributes[url_key]$"/>
            <argument name="productName" value="$createProduct.name$"/>
            <argument name="productPrice" value="$createProduct.price$"/>
        </actionGroup>

        <!-- Login Customer Storefront -->
        <actionGroup ref="LoginToStorefrontActionGroup" stepKey="customerLogin">
            <argument name="Customer" value="$createCustomer$" />
        </actionGroup>

        <!--Go to category and check special price-->
        <actionGroup ref="AssertStorefrontProductSpecialPriceInCategoryPageActionGroup" stepKey="assertProductSpecialPriceInCategoryPage">
            <argument name="categoryUrl" value="$createCategory.custom_attributes[url_key]$"/>
            <argument name="productName" value="$createProduct.name$"/>
        </actionGroup>

        <!-- Customer Checkout Process-->
        <amOnPage url="{{StorefrontCategoryPage.url($$createCategory.custom_attributes[url_key]$$)}}" stepKey="onCategoryPage"/>
        <waitForPageLoad stepKey="waitForPageLoad"/>
        <actionGroup ref="StorefrontHoverProductOnCategoryPageActionGroup" stepKey="hoverProduct"/>
        <actionGroup ref="StorefrontClickAddToCartButtonActionGroup" stepKey="addToCart"/>
        <waitForElementVisible selector="{{StorefrontCategoryMainSection.SuccessMsg}}" time="30" stepKey="waitForProductAdded"/>
        <see selector="{{StorefrontCategoryMainSection.SuccessMsg}}" userInput="You added $$createProduct.name$$ to your shopping cart." stepKey="seeAddedToCartMessage"/>
        <see selector="{{StorefrontMinicartSection.quantity}}" userInput="1" stepKey="seeCartQuantity"/>
        <actionGroup ref="GoToCheckoutFromMinicartActionGroup" stepKey="customerGoToCheckoutFromMinicart"/>
        <!--Select Shipping Method-->
        <actionGroup ref="CheckoutSelectFlatRateShippingMethodActionGroup" stepKey="selectFlatRateShippingMethod"/>
        <actionGroup ref="StorefrontCheckoutClickNextOnShippingStepActionGroup" stepKey="clickNext"/>
        <!--Select Payment Method-->
        <actionGroup ref="CheckoutSelectCheckMoneyOrderPaymentActionGroup" stepKey="selectPaymentMethod"/>
        <!-- Place Order -->
        <actionGroup ref="CheckoutPlaceOrderActionGroup" stepKey="placeOrder">
            <argument name="orderNumberMessage" value="CONST.successCheckoutOrderNumberMessage"/>
            <argument name="emailYouMessage" value="CONST.successCheckoutEmailYouMessage"/>
        </actionGroup>

        <!-- Get Order id -->
        <grabTextFrom selector="{{CheckoutSuccessMainSection.orderNumber22}}" stepKey="grabOrderNumber"/>

        <!-- Assert Cart is Empty -->
        <actionGroup ref="AssertShoppingCartIsEmptyActionGroup" stepKey="seeEmptyShoppingCartForFirstCustomer"/>

        <!-- Go to Customer Order History and Check Order -->
        <amOnPage url="{{StorefrontCustomerDashboardPage.url}}" stepKey="navigateToCustomerDashboardPage"/>
        <waitForPageLoad stepKey="waitForCustomerDashboardPageLoad"/>
        <see selector="{{StorefrontCustomerRecentOrdersSection.orderTotal}}" userInput="$50.00" stepKey="checkOrderTotalInStorefront"/>
        <see selector="#my-orders-table td.status" userInput="Received" stepKey="checkOrderStatusReceived"/>
        <dontSeeElement selector="#my-orders-table td.actions a.order" stepKey="dontSeeReorderButton"/>
        <dontSeeElement selector="#my-orders-table td.actions a.view" stepKey="dontSeeViewButton"/>

        <!-- Check that Order is Absent in admin Orders Grid -->
        <amOnPage url="{{AdminOrdersPage.url}}" stepKey="onOrdersPage"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappearOnOrdersPage"/>
        <actionGroup ref="ClearFiltersAdminDataGridActionGroup" stepKey="clearGridFilter"/>
        <fillField selector="{{AdminOrdersGridSection.search}}" userInput="{$grabOrderNumber}" stepKey="fillOrderNum"/>
        <click selector="{{AdminOrdersGridSection.submitSearch}}" stepKey="submitSearchOrderNum"/>
        <waitForLoadingMaskToDisappear stepKey="waitForLoadingMaskToDisappearOnSearch"/>
        <see selector="{{AdminDataGridTableSection.dataGridEmpty}}" userInput="We couldn't find any records." stepKey="assertDataGridEmptyMessage"/>
        <click selector="{{AdminProductAttributeGridSection.ResetFilter}}" stepKey="clearExistingFilters"/>

        <!-- Check that Product Quantity is not Changed -->
        <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="searchForProduct">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <actionGroup ref="OpenEditProductOnBackendActionGroup" stepKey="openEditProduct">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <seeInField selector="{{AdminProductFormSection.productQuantity}}" userInput="1000" stepKey="seeProductQuantity"/>

        <!-- Trigger Async Place Order Consumer-->
        <actionGroup ref="CliConsumerStartActionGroup" stepKey="startMessageQueueConsumer">
            <argument name="consumerName" value="{{AsyncPlaceOrderConsumerData.consumerName}}"/>
            <argument name="maxMessages" value="{{AsyncPlaceOrderConsumerData.messageLimit}}"/>
        </actionGroup>

        <!-- Wait 30 for Order Processing-->
        <wait time="30" stepKey="conditionalWait"/>

        <!-- Check that Order is Available -->
        <amOnPage url="{{StorefrontCustomerDashboardPage.url}}" stepKey="navigateToCustomerDashboardPage2"/>
        <waitForPageLoad stepKey="waitForCustomerDashboardPageLoad2"/>
        <!-- Check that catalog price rule is applied to the total order price-->
        <see selector="{{StorefrontCustomerRecentOrdersSection.orderTotal}}" userInput="$50.00" stepKey="checkOrderTotalInStorefront2"/>
        <seeElement selector="#my-orders-table td.actions a.order" stepKey="seeReorderButton"/>
        <seeElement selector="#my-orders-table td.actions a.view" stepKey="seeViewButton"/>
        <see selector="#my-orders-table td.status" userInput="Pending" stepKey="checkOrderStatusPending"/>

        <!--Sign out from customer account-->
        <actionGroup ref="StorefrontCustomerLogoutActionGroup" stepKey="logoutFromCustomer"/>
        <!-- Find the Order on storefront > Navigate to: Orders and Returns -->
        <amOnPage url="{{StorefrontGuestOrderSearchPage.url}}" stepKey="amOnOrdersAndReturns"/>
        <waitForPageLoad stepKey="waiForStorefrontPage"/>
        <!-- Fill the Form with Correspondent Order Data -->
        <actionGroup ref="StorefrontFillOrdersAndReturnsFormActionGroup" stepKey="fillOrder">
            <argument name="orderNumber" value="$grabOrderNumber"/>
            <argument name="customer" value="$createCustomer$"/>
        </actionGroup>
        <!-- Click on the "Continue" button -->
        <click selector="{{StorefrontGuestOrdersReturnsSearchSection.continue}}" stepKey="clickContinue"/>
        <waitForPageLoad stepKey="waitForPageLoad1"/>
        <!-- Check that Order Status is Pending and Grand Total includes applied Catalog Rule Price -->
        <actionGroup ref="AssertOrderAvailableActionGroup" stepKey="checkIfOrderAvailableAndCatalogRuleApplied">
            <argument name="product" value="$$createProduct$$"/>
            <argument name="price" value="$50.00"/>
            <argument name="status" value="Pending"/>
        </actionGroup>
        <!-- Check that Catalog Rule Price is applied to the product price-->
        <see userInput="$45.00" selector="{{StorefrontOrderDetailsSection.priceExcludingTax}}" stepKey="verifyPriceWithAppliedCatalogRule"/>

        <!--Assert Order is in Orders Grid -->
        <actionGroup ref="AdminOrderFilterByOrderIdAndStatusActionGroup" stepKey="seeFirstOrder">
            <argument name="orderId" value="$grabOrderNumber"/>
            <argument name="orderStatus" value="Pending"/>
        </actionGroup>
        <see userInput="{$grabOrderNumber}" selector="{{AdminOrdersGridSection.gridCell('1','ID')}}" stepKey="assertOrderID"/>
        <see userInput="Pending" selector="{{AdminOrdersGridSection.gridCell('1','Status')}}" stepKey="assertOrderStatus"/>
    </test>
</tests>
