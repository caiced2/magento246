<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminCreateOrderWithCustomerSegmentByProductOrderedTest">
        <annotations>
            <features value="CustomerSegment"/>
            <stories value="Customer segment with order based condition"/>
            <title value="Customer segment with order based condition should automatically match customer after order is placed in backend"/>
            <description value="Customer segment with order based condition should automatically match customer after order is placed in backend"/>
            <severity value="MINOR"/>
            <useCaseId value="MC-40385"/>
            <testCaseId value="MC-40546"/>
            <group value="CustomerSegment"/>
        </annotations>
        <before>
            <!--Create customer-->
            <createData entity="Simple_US_CA_Customer" stepKey="createCustomer"/>
            <!--Create second customer-->
            <createData entity="Simple_US_Customer" stepKey="createCustomer2"/>
            <!--Create category-->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <!--Create product-->
            <createData entity="_defaultProduct" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
            </createData>
            <!--Login to backend-->
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!--Navigate to SKU product attribute edit page-->
            <actionGroup ref="NavigateToEditProductAttributeActionGroup" stepKey="editSkuAttribute">
                <argument name="ProductAttribute" value="sku" />
            </actionGroup>
            <!--Make Attribute 'sku' accessible for Promo Rule Conditions-->
            <actionGroup ref="ChangeUseForPromoRuleConditionsProductAttributeActionGroup" stepKey="changeAttributePromoRule">
                <argument name="option" value="Yes" />
            </actionGroup>
        </before>
        <after>
            <!--Delete customer-->
            <deleteData createDataKey="createCustomer" stepKey="deleteCustomer"/>
            <!--Delete second customer-->
            <deleteData createDataKey="createCustomer2" stepKey="deleteCustomer2"/>
            <!--Delete category-->
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <!--Delete product-->
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <!--Navigate to SKU product attribute edit page-->
            <actionGroup ref="NavigateToEditProductAttributeActionGroup" stepKey="editSkuAttribute">
                <argument name="ProductAttribute" value="sku" />
            </actionGroup>
            <!--Revert Attribute 'sku' to it's default value (not accessible for Promo Rule Conditions)-->
            <actionGroup ref="ChangeUseForPromoRuleConditionsProductAttributeActionGroup" stepKey="changeAttributePromoRule">
                <argument name="option" value="No" />
            </actionGroup>
            <!--Delete customer segment-->
            <actionGroup ref="FindAndDeleteCustomerSegmentActionGroup" stepKey="deleteSegment">
                <argument name="segmentName" value="{{CustomerSegmentForRegistered.name}}"/>
            </actionGroup>
            <magentoCron groups="index" stepKey="reindex"/>
            <!--Logout from backend-->
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!--Create customer segment-->
        <actionGroup ref="CreateCustomerSegmentWithContinueEditActionGroup" stepKey="createCustomerSegment">
            <argument name="customerSegment" value="CustomerSegmentForRegistered"/>
        </actionGroup>
        <!--Add "If Product was ordered and matches ALL of these Conditions" condition-->
        <actionGroup ref="AdminCustomerSegmentAddProductHistoryConditionActionGroup" stepKey="addProductWasOrderedCondition">
            <argument name="conditionName" value="{{CustomerSegmentProductWasOrderedCondition.name}}"/>
            <argument name="conditionOperator" value="{{CustomerSegmentProductWasOrderedCondition.operator}}"/>
            <argument name="conditionOperand" value="{{CustomerSegmentProductWasOrderedCondition.operand}}"/>
            <argument name="conditionAggregator" value="{{CustomerSegmentProductWasOrderedCondition.aggregator}}"/>
            <argument name="parentLevel" value="1"/>
            <argument name="level" value="1--1"/>
        </actionGroup>
        <!--Add "Product SKU is createProduct.sku" condition-->
        <actionGroup ref="AdminCustomerSegmentAddSKUConditionActionGroup" stepKey="addSkuCondition">
            <argument name="conditionOperand" value="$createProduct.sku$"/>
            <argument name="parentLevel" value="1--1"/>
            <argument name="level" value="1--1--1"/>
        </actionGroup>
        <!--Save customer segment-->
        <actionGroup ref="AdminCustomerSegmentSaveActionGroup" stepKey="saveCustomerSegment"/>
        <!--Create new customer order-->
        <actionGroup ref="NavigateToNewOrderPageExistingCustomerActionGroup" stepKey="navigateToNewOrderWithExistingCustomer">
            <argument name="customer" value="$$createCustomer$$"/>
        </actionGroup>
        <!--Add product to order-->
        <actionGroup ref="AddSimpleProductToOrderActionGroup" stepKey="addSimpleProductToOrder">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <!--Select FlatRate shipping method-->
        <actionGroup ref="OrderSelectFlatRateShippingActionGroup" stepKey="orderSelectFlatRateShippingMethod"/>
        <!--Submit order-->
        <actionGroup ref="AdminSubmitOrderActionGroup" stepKey="submitOrder"/>
        <!--Open customer segment-->
        <actionGroup ref="FindAndOpenCustomerSegmentActionGroup" stepKey="openSegment">
            <argument name="segmentName" value="{{CustomerSegmentForRegistered.name}}"/>
        </actionGroup>
        <!--Assert that customer is in "Matched customers"-->
        <actionGroup ref="AdminCheckCustomerInSegmentActionGroup" stepKey="checkCustomerInSegment">
            <argument name="customer" value="$createCustomer$"/>
        </actionGroup>
        <!--Assert that second customer is not in "Matched customers"-->
        <actionGroup ref="AdminCheckCustomerNotMatchedSegmentActionGroup" stepKey="checkCustomerNotInSegment">
            <argument name="customer" value="$createCustomer2$"/>
        </actionGroup>
    </test>
</tests>
