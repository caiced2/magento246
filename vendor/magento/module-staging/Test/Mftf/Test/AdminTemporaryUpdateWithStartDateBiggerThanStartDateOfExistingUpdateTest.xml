<?xml version="1.0" encoding="UTF-8"?>
<!--
 /**
  * Copyright Â© Magento, Inc. All rights reserved.
  * See COPYING.txt for license details.
  */
-->

<tests xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="urn:magento:mftf:Test/etc/testSchema.xsd">
    <test name="AdminTemporaryUpdateWithStartDateBiggerThanStartDateOfExistingUpdateTest">
        <annotations>
            <features value="Staging"/>
            <stories value="Staging updates"/>
            <title value="Temporary Update with start date bigger than start date of existing update and end date less than start date of existing update."/>
            <description value="Temporary Update with start date bigger than start date of existing update and end date less than start date of existing update."/>
            <severity value="MAJOR"/>
            <testCaseId value="AC-4225"/>
        </annotations>
        <before>
            <!--Create Simple Product and Category-->
            <createData entity="_defaultCategory" stepKey="createCategory"/>
            <createData entity="ApiProductWithDescription" stepKey="createProduct">
                <requiredEntity createDataKey="createCategory"/>
                <field key="price">10</field>
            </createData>
            <actionGroup ref="AdminLoginActionGroup" stepKey="loginAsAdmin"/>
            <!-- Create storeView -->
            <actionGroup ref="AdminCreateStoreViewActionGroup" stepKey="createStoreView"/>
            <magentoCron groups="index" stepKey="reindex"/>
        </before>
        <after>
            <!-- delete created data -->
            <deleteData createDataKey="createProduct" stepKey="deleteProduct"/>
            <deleteData createDataKey="createCategory" stepKey="deleteCategory"/>
            <actionGroup ref="AdminDeleteStoreViewActionGroup" stepKey="deleteStoreView"/>
            <magentoCron groups="index" stepKey="reindex"/>
            <actionGroup ref="AdminClearFiltersActionGroup" stepKey="clearProductFilters"/>
            <actionGroup ref="AdminLogoutActionGroup" stepKey="logout"/>
        </after>
        <!-- Open Product Grid, Filter product and open -->
        <actionGroup ref="SearchForProductOnBackendActionGroup" stepKey="filterProduct">
            <argument name="product" value="$$createProduct$$"/>
        </actionGroup>
        <click selector="{{AdminProductGridSection.productGridNameProduct('$$createProduct.name$$')}}" stepKey="openProductForEdit"/>
        <!-- Create first Schedule New Update -->
        <conditionalClick selector="{{AdminStagingSlideOutSection.scheduleNewUpdateBtn}}" dependentSelector="{{AdminStagingSlideOutSection.updateName}}" visible="false" stepKey="clickNewUpdate"/>
        <waitForPageLoad stepKey="waitForLoading"/>
        <click selector="{{AdminStagingSlideOutSection.changeStoreButton}}" stepKey="clickStoreSwitcher"/>
        <click selector="{{AdminStagingSlideOutSection.selectStoreView(customStore.name)}}" stepKey="clickStoreView"/>
        <waitForElementVisible selector="{{AdminConfirmationModalSection.ok}}" stepKey="waitForElementVisible"/>
        <click selector="{{AdminConfirmationModalSection.ok}}" stepKey="acceptMessage"/>
        <!-- Fill Schedule update fields -->
        <generateDate date="+1 day" format="m/j/Y g:i A" stepKey="generateStartDate"/>
        <generateDate date="+3 day" format="m/j/Y g:i A" stepKey="generateEndDate"/>
        <fillField selector="{{AdminStagingSlideOutSection.updateName}}" userInput="s5UpdateName" stepKey="fillFirstScheduleUpdateName"/>
        <fillField selector="{{AdminStagingSlideOutSection.updateDescription}}" userInput="s5updateDescription" stepKey="fillFirstScheduleDescription"/>
        <fillField selector="{{AdminStagingSlideOutSection.startDate}}" userInput="{$generateStartDate}}" stepKey="fillFirsteScheduleStartDate"/>
        <fillField selector="{{AdminStagingSlideOutSection.endDate}}" userInput="{$generateEndDate}" stepKey="fillFirstScheduleEndDate"/>
        <fillField selector="{{AdminCatalogStagingSlideOutSection.productPrice}}" userInput="14" stepKey="fillFirstScheduleProductPrice"/>
        <!-- Open date picker and collect date and time in format that we need for assertions -->
        <!-- Start date First Staging S5 -->
        <click selector="{{AdminStagingSlideOutSection.datepickerStartDate}}" stepKey="clickDatePickerStartDay"/>
        <grabTextFrom selector="{{AdminStagingSlideOutSection.datapickerCurrentDay}}" stepKey="grabStartCurrentDayS5"/>
        <grabTextFrom selector="{{AdminStagingSlideOutSection.datapickerMonth}}" stepKey="grabStartMonthS5"/>
        <grabValueFrom selector="{{AdminStagingSlideOutSection.datapickerYear}}" stepKey="grabStartYearS5"/>
        <click selector="{{AdminStagingSlideOutSection.datepickerClose}}" stepKey="clickClose"/>
        <!-- End date First Staging S5-->
        <click selector="{{AdminStagingSlideOutSection.datepickerEndDate}}" stepKey="clickDatePickerEndDay"/>
        <grabTextFrom selector="{{AdminStagingSlideOutSection.datapickerCurrentDay}}" stepKey="grabEndCurrentDayS5"/>
        <grabTextFrom selector="{{AdminStagingSlideOutSection.datapickerMonth}}" stepKey="grabEndMonthS5"/>
        <grabValueFrom selector="{{AdminStagingSlideOutSection.datapickerYear}}" stepKey="grabEndYearS5"/>
        <click selector="{{AdminStagingSlideOutSection.datepickerClose}}" stepKey="clickCloseDatePicker"/>
        <click selector="{{AdminStagingSlideOutSection.save}}" stepKey="clickSave"/>
        <!-- assert update details -->
        <see selector="{{AdminScheduledChangesSection.scheduleItemName}}" userInput="s5UpdateName" stepKey="seeFirstScheduleUpdateName"/>
        <see selector="{{AdminScheduledChangesSection.scheduleItemDescription}}" userInput="s5updateDescription" stepKey="seeFirstScheduleUpdateDescription"/>
        <seeElement selector="{{AdminScheduledChangesSection.scheduleStartDate('{$grabStartMonthS5} {$grabStartCurrentDayS5}, {$grabStartYearS5}')}}" stepKey="seeFirstScheduleStartDate"/>
        <seeElement selector="{{AdminScheduledChangesSection.scheduleEndDate('{$grabEndMonthS5} {$grabEndCurrentDayS5}, {$grabEndYearS5}')}}" stepKey="seeFirstScheduleEndDate"/>
        <!-- Create second Schedule Update -->
        <conditionalClick selector="{{AdminStagingSlideOutSection.scheduleNewUpdateBtn}}" dependentSelector="{{AdminStagingSlideOutSection.updateName}}" visible="false" stepKey="againClickNewUpdate"/>
        <waitForPageLoad stepKey="waitForPageLoading"/>
        <!-- Again create Schedule New Update -->
        <generateDate date="+1 day" format="m/j/Y g:i A" stepKey="generateSecondStartDate"/>
        <generateDate date="+2 day" format="m/j/Y g:i A" stepKey="generateSecondEndDate"/>
        <fillField selector="{{AdminStagingSlideOutSection.updateName}}" userInput="S8.11UpdateName" stepKey="fillSecondScheduleUpdateName"/>
        <actionGroup ref="FillScheduleUpdateRemovePriceActionGroup" stepKey="fillWrongScheduleUpdate">
            <argument name="staging" value="S8UpdateNameStaging"/>
            <argument name="timeStart" value="{$generateSecondStartDate}"/>
            <argument name="timeEnd" value="{$generateSecondEndDate}"/>
        </actionGroup>
        <see selector="{{AdminStagingSlideOutSection.scheduleErrorMessage}}" userInput="error: : Future Update already exists in this time range. Set a different range and try again." stepKey="seeErrorMessage"/>
    </test>
</tests>
